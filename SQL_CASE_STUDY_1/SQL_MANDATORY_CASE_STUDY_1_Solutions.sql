use SQL_Mandatory_Case_Study_1


--Q1. Display the number of states present in the LocationTable.

select count(distinct(State)) as 'Number of States' 
from location

--Q2. How many products are of regular type?

select count(Type) as 'Total Products of Regular Type'
from Product 
where Type = 'Regular'

--Q3. How much spending has been done on marketing of product ID 1?

select sum(Total_Expenses) as 'Total Spending' 
from Fact 
where ProductID = 1 


--Q4. What is the minimum sales of a product?

select min(Sales)  as 'Minimum Sales of a Product'
from Fact 

--Q5. Display the max Cost of Good Sold (COGS).


select max(COGS) as 'Max Cost of Goods Sold (COGS)'
from Fact

--Q6. Display the details of the product where product type is coffee.

select * 
from Product
where Product_Type = 'Coffee'


--Q7. Display the details where total expenses are greater than 40.


select * 
from Fact
where Total_Expenses > 40

--Q8. What is the average sales in area code 719?

select avg(sales) as 'Average Sales'
from fact
where Area_Code = 719


--Q9. Find out the total profit generated by Colorado state.

select sum(Profit) as 'Total Profit', f.Area_Code
from Fact f
join Location l 
on f.Area_Code = l.Area_Code
where l.State = 'Colorado'
group by f.Area_Code


--Q10. Display the average inventory for each product ID.

select ProductId, avg(Inventory) as 'Average Inventory'
from fact
group by ProductId
order by ProductId

--Q11. Display state in a sequential order in a Location Table.

select distinct(State) 
from Location 
order by State

--Q12. Display the average budget of the Product where the average budget margin should be greater than 100.


select f.ProductID, p.Product_Type, avg(Budget_Margin) as 'Average Budget Margin'
from fact f
join Product p on f.ProductId = p.ProductId
group by f.ProductId, p.Product_Type
having avg(Budget_Margin) > 100

--Q13. What is the total sales done on date 2010-01-01?

select sum(Sales) as 'Total Sales'
from Fact
where Date = '2010-01-01'

--Q14. Display the average total expense of each product ID on an individual date.


select  ProductId,Date,avg(Total_Expenses) as 'Average of Total Expenses'
from Fact 
group by Date , ProductId
order by ProductId

--Q15. Display the table with the following attributes such as date, productID,
--     product_type, product, sales, profit, state, area_code.

select f.Date, p.ProductId, p.Product_Type, p.Product, f.Sales, f.Profit, State, l.Area_Code
from fact f 
join Location l on f.Area_Code = l.Area_Code
join Product p on f.ProductId = p.ProductId


--Q16. Display the rank without any gap to show the sales wise rank.

select  *, dense_rank() over (order by Sales desc) as Sales_Rank
from fact
order by Sales_Rank;


--Q17. Find the state wise profit and sales.

select State, sum(profit) as 'State wise Profit', sum(Sales) as  'State wise Sales'
from fact f 
join location l on f.Area_Code = l.Area_Code
group by l.State


--Q18. Find the state wise profit and sales along with the product name.

select l.State, p.Product, sum(Profit) as 'State wise Profit', sum(Sales) as 'State wise Sales'
from fact f 
join location l on f.Area_Code = l.Area_Code
join Product p on f.ProductId = p.ProductId
group by Product, State

--Q19. If there is an increase in sales of 5%, calculate the increased sales.


select *,(sales + (sales * 0.05)) as 'Increased Sales'
from fact


--Q20. Find the maximum profit along with the product ID and producttype.

select  p.ProductId, p.Product_Type,max(Profit) as 'Maximum Profit'
from Fact f 
join Product p on f.ProductId = p.ProductId
group by p.ProductId, p.Product_Type


--Q21. Create a stored procedure to fetch the result according to the product type from Product Table.

create procedure Product_details(@Producttype as varchar(200))
as 
select * from Product
where Product_Type = @Producttype
go

exec Product_details @Producttype = 'Espresso'


--Q22. Write a query by creating a condition in which if the total expenses is less than 60
--     then it is a profit or else loss.


select ProductId , Total_Expenses,
iif(Total_Expenses < 60 , 'Profit','Loss') as 'Finding Profit and Loss',Area_Code
from Fact 

--Q23. Give the total weekly sales value with the date and product ID details. 
--     Use roll-up to pull the data in hierarchical order.

select Date, ProductId, datepart(week,Date) as Week_Number, sum(Sales) as 'Weekly Sales'
from fact
group by rollup(datepart(week,Date),Date,ProductId)
order by Week_Number, ProductId


--Q24. Apply union and intersection operator on the tables which consist of attribute area code.

select Area_Code from Fact 
union
select Area_Code from Location
order by Area_Code

select Area_Code from Fact 
intersect
select Area_Code from Location
order by Area_Code





--Q25. Create a user-defined function for the product table to fetch a particular
--     product type based upon the user’s preference.

create function Fetching_Product(@ProductType as varchar(200))
returns table
as  
return(select * from Product where Product_Type = @ProductType)

select * from dbo.Fetching_Product('Coffee') 


--Q26. Change the product type from coffee to tea where product ID is 1 and undo it.

begin transaction
update Product 
set Product_Type = 'Tea'
where Product_Type = 'Coffee' and ProductId = 1 
select * from Product

rollback transaction
select * from Product

--Q27. Display the date, product ID and sales where total expenses are between 100 to 200.

select Date, ProductId, Sales 
from Fact 
where Total_Expenses between 100 and 200


--Q28. Delete the records in the Product Table for regular type.


delete from Product
where Type = 'Regular'

select * from Product


--Q29. Display the ASCII value of the fifth character from the column Product.

select ascii(substring(Product, 5, 1)) as 'Fifth Character ASCII'
from Product

























